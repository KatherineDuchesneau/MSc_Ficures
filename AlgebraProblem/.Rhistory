}
# Add the simulated co-occurence to the simulated data
Root<-cbind(rbind(data.frame(Root$ind),data.frame(ind=rep(i,NXsec))$ind),rbind(data.frame(Root$c1),data.frame(tempMyc)),rbind(data.frame(Root$c2),data.frame(tempPath)))
colnames(Root)<-c("ind","c1","c2")
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root$ind<-rbind(data.frame(Root$ind),data.frame(ind=rep(i,NXsec))$ind)
Root$c1<-rbind(data.frame(Root$c1),data.frame(tempMyc))
Root$c2<-rbind(data.frame(Root$c2),data.frame(tempPath))
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root$ind<-rbind(data.frame(Root$ind),data.frame(ind=rep(i,NXsec))$ind)
Root$c1<-rbind(data.frame(Root$c1),data.frame(tempMyc))
Root$c2<-rbind(data.frame(Root$c2),data.frame(tempPath))
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
bla<-c(1)
df<-data.frame(bla)
df <- rbind(df, data.frame(bla = c(2,3,4,5)))
df
Root<-data.frame(ind=NA,c1=NA,c2=NA) # Data for saving output
View(Root)
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
Root<-data.frame(ind=NA,c1=NA,c2=NA) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root$ind<-rbind(data.frame(Root$ind),data.frame(ind=rep(i,NXsec))$ind)
Root$c1<-rbind(data.frame(Root$c1),data.frame(tempMyc))
Root$c2<-rbind(data.frame(Root$c2),data.frame(tempPath))
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
NXsec=100
NPlants=10
Pm=0.2
Pp=0.2
Pc=0.5
for(1 in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
View(Root)
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
View(Root)
# Add the simulated co-occurence to the simulated data
Root$ind<-rbind(data.frame(Root$ind),data.frame(ind=rep(i,NXsec))$ind)
# Add the simulated co-occurence to the simulated data
Root$ind<-rbind(data.frame(Root$ind),data.frame(ind=rep(1,NXsec))$ind)
Root$ind
# Add the simulated co-occurence to the simulated data
Root$ind[i:NXsec]<-ind=rep(1,NXsec)
# Add the simulated co-occurence to the simulated data
Root$ind[1:NXsec]<-ind=rep(1,NXsec)
# Add the simulated co-occurence to the simulated data
Root$ind[1:NXsec]<-rep(1,NXsec)
Root
c<-1
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
c<-1
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root$ind[c:NXsec]<-rep(i,NXsec)
Root$c1[c:NXsec]<-tempMyc
Root$c2[c:NXsec]<-tempPath
#counter
c<-NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
tempMyc
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
c<-1
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root$ind[c:c+NXsec]<-rep(i,NXsec)
Root$c1[c:c+NXsec]<-tempMyc
Root$c2[c:c+NXsec]<-tempPath
#counter
c<-NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
View(Toy)
c<-1
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root$ind[c:c+NXsec]<-rep(i,NXsec)
Root$c1[c:c+NXsec]<-tempMyc
Root$c2[c:c+NXsec]<-tempPath
#counter
c<-NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root$ind[c:c+NXsec]<-rep(i,NXsec)
Root$c1[c:c+NXsec]<-tempMyc
Root$c2[c:c+NXsec]<-tempPath
#counter
c<-NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
View(Root)
}
c<-1
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm))
tempPath<-rep(NA,NXsec)
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root$ind[c:c+NXsec]<-rep(1,NXsec)
Root$ind[c:c+NXsec]
c+NXsec
c
Root$ind[c:c+NXsec]
Root$ind[c:c+NXsec]
Root[c:c+NXsec,1]
c+NXsec
c
c:c+NXsec
seq(c:c+NXsec)
Root[seq(c:c+NXsec),1]
# Add the simulated co-occurence to the simulated data
Root[1:101,1]<-rep(1,NXsec)
# Add the simulated co-occurence to the simulated data
Root[1:100,1]<-rep(1,NXsec)
Root[c+1:NXsec,1]<-rep(1,NXsec)
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
c<-0
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root[c+1:NXsec,1]<-rep(1,NXsec)
Root$c1[c+1:c+NXsec]<-tempMyc
Root$c2[c+1:c+NXsec]<-tempPath
#counter
c<-NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
c<-0
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root[c+1:NXsec,1]<-rep(1,NXsec)
Root[c+1:c+NXsec,2]<-tempMyc
Root[c+1:c+NXsec,3]<-tempPath
#counter
c<-NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
c<-0
tempPath<-rep(NA,NXsec)
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
Root[c+1:NXsec,1]<-rep(1,NXsec)
Root[c+1:c+NXsec,2]<-tempMyc
tempMyc
Root[c+1:c+NXsec,2]
c+1:c+NXsec
Root[c+1:c+NXsec,2]
Root[1:100,2]
Root[(c+1):(c+NXsec),2]<-tempMyc
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
c<-0
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root[(c+1):(c+NXsec),1]<-rep(1,NXsec)
Root[(c+1):(c+NXsec),2]<-tempMyc
Root[(c+1):(c+NXsec),3]<-tempPath
#counter
c<-NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
View(Toy)
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
c<-0
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root[(c+1):(c+NXsec),1]<-rep(i,NXsec)
Root[(c+1):(c+NXsec),2]<-tempMyc
Root[(c+1):(c+NXsec),3]<-tempPath
#counter
c<-NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
View(Toy)
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
c<-0
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root[(c+1):(c+NXsec),1]<-rep(i,NXsec)
Root[(c+1):(c+NXsec),2]<-tempMyc
Root[(c+1):(c+NXsec),3]<-tempPath
#counter
c<-c+NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
Bcor(x = Toy, coef = "cor")
require("dplyr")
Bcor<-function(x=NA,ind=ind,c1=c1,c2=c2,coef=NA){
# Check if user wants covariance matrix or correlation coefficient
# Calculate the frequency of each possible outcome
A<- length((dplyr::filter(x, c1 == 1 & c2 == 1))$ind)
B<- length((dplyr::filter(x, c1 == 1 & c2 == 0))$ind)
C<- length((dplyr::filter(x, c1 == 0 & c2 == 1))$ind)
D<- length((dplyr::filter(x, c1 == 0 & c2 == 0))$ind)
# Calculate variances, covariance and correlation
V1<-(A+B)*(1-(A+B))
V2<-(A+C)*(1-(A+C))
COV12<-A-(A+B)*(A+C)
COR12<-COV12/(sqrt(V1)*sqrt(V2))
if (coef == cov){
return(c(V1,V2,Cov))
}
if (coef == cor){
return(COR)
}
}
Bcor(x = Toy, coef = "cor")
# test
A<- length((dplyr::filter(Toy, c1 == 1 & c2 == 1))$ind)
A
B<- length((dplyr::filter(Toy, c1 == 1 & c2 == 0))$ind)
B
C
C<- length((dplyr::filter(Toy, c1 == 0 & c2 == 1))$ind)
D<- length((dplyr::filter(Toy, c1 == 0 & c2 == 0))$ind)
C
D
V1<-(A+B)*(1-(A+B))
V2<-(A+C)*(1-(A+C))
COV12<-A-(A+B)*(A+C)
COV12
COR12<-COV12/(sqrt(V1)*sqrt(V2))
V1
A
COV12
sqrt(V1)
COR12 <- COV12/(sqrt(abs(V1))*sqrt(abs(V2)))
COV12 <- A-(A+B)*(A+C)
V1 <- (A+B)*(1-(A+B))
V2 <- (A+C)*(1-(A+C))
COV12 <- A-(A+B)*(A+C)
COR12 <- COV12/(sqrt(V1*V2)
)
COR12
COV12
GMsim<-function(NXsec=100,NPlants=10,Pm=0.2,Pp=0.2,Pc=0.5){
c<-0
Root<-data.frame(ind=rep(NA,NPlants*NXsec),c1=rep(NA,NPlants*NXsec),c2=rep(NA,NPlants*NXsec)) # Data for saving output
for(i in 1:NPlants){
tempMyc<-sample(1:0,NXsec,replace=T,prob=c(Pm,1-Pm)) # Generate Myc colonization
tempPath<-rep(NA,NXsec) # Empty vector of pathogen infection
# Simulate root cross-sections.
if(length(tempPath[tempMyc==0])>0){
tempPath[tempMyc==0]<-sample(1:0,length(tempPath[tempMyc==0]),replace=T,prob=c(Pp,1-Pp))
}
if(length(tempPath[tempMyc==1])>0){
tempPath[tempMyc==1]<-sample(1:0,length(tempPath[tempMyc==1]),replace=T,prob=c(Pp*Pc,1-Pp*Pc))
}
# Add the simulated co-occurence to the simulated data
Root[(c+1):(c+NXsec),1]<-rep(i,NXsec)
Root[(c+1):(c+NXsec),2]<-tempMyc
Root[(c+1):(c+NXsec),3]<-tempPath
#counter
c<-c+NXsec
# Clear temporary vectors to avoid errors in future iterations
tempMyc<-tempPath<-NA
}
return(Root) ## Don't forget to return this to the user!
}
Toy<-GMsim()
Bcor(x = Toy, coef = "cor")
Bcor<-function(x=NA,ind=ind,c1=c1,c2=c2,coef=NA){
# Check if user wants covariance matrix or correlation coefficient
# Calculate the frequency of each possible outcome
A<- length((dplyr::filter(x, c1 == 1 & c2 == 1))$ind)
B<- length((dplyr::filter(x, c1 == 1 & c2 == 0))$ind)
C<- length((dplyr::filter(x, c1 == 0 & c2 == 1))$ind)
D<- length((dplyr::filter(x, c1 == 0 & c2 == 0))$ind)
# Calculate variances, covariance and correlation
V1 <- (A+B)*(1-(A+B))
V2 <- (A+C)*(1-(A+C))
COV12 <- A-(A+B)*(A+C)
COR12 <- COV12/(sqrt(V1*V2))
if (coef == cov){
return(c(V1,V2,Cov))
}
if (coef == cor){
return(COR)
}
}
Bcor(x = Toy, coef = "cor")
Bcor(x = Toy, coef = cor)
Icor<-function(p1,p2,a){
# Conditional probabilities
## A through B can be estimated from the data
## Use these equations to try to solve for p1, p2 & a
## For example, B-C or C-B will isolate p1 and p2 only
A<-p1*p2*(1-2*a)
B<-p1*(1-p2)+p1*p2*a
C<-(1-p1)*p2+p1*p2*a
D<-(1-p1)*(1-p2)
# Equations for calculating (co)variances and correlation coefficient
V1<-(A+B)*(1-(A+B))
V2<-(A+C)*(1-(A+C))
COV12<-A-(A+B)*(A+C)
COR12<-COV12/(sqrt(V1)*sqrt(V2))
# Insert equations for A through B here
## For example, if you wanted to solve for p1 & p2 only
## Combine A through B to isolate each of these terms
a<-(2*p1*p2-1-A+B+C+D)/(4*p1*p2) # Insert equation for estimating alpha (a)
p1<-B-C+p2 # Insert equation for p1
p2<-C-B+p1# insert equation for p2
return(cbind(a,p1,p2))
}
# Test your model
SimDat<-data.frame(P1=runif(5000),P2=runif(5000),a=runif(5000))
Parm<-Icor(p1=SimDat$P1,p2=SimDat$P2,a=SimDat$a)
#Each of these 3 plots will be a 1:1 line if your calculations are correct"
## Test p1
qplot(SimDat$P1,Parm[,2])
library(ggplot2)
#Each of these 3 plots will be a 1:1 line if your calculations are correct"
## Test p1
qplot(SimDat$P1,Parm[,2])
## Test p2
qplot(SimDat$P2,Parm[,3])
## Test alpha
qplot(SimDat$a,Parm[,1])
## Test p2
qplot(SimDat$P2,Parm[,3])
