hist(PlantLength$Length_plant)
hist(log(PlantLength$Length_plant))
View(PlantLength)
library(tidyverse)
library(lme4)
library(MASS)
library(MuMIn)
library(emmeans)
library(boot)
library(brms)
library(loo)
library(fitdistrplus)
library(mefa)
library(ggbiplot)
library(pvclust)
library(vegan)
library(ggbiplot)
car::qqp(PlantLength$Length_plant, "norm")
shapiro.test(PlantLength$Length_plant)
descdist(PlantLength$Length_plant, discrete = FALSE, boot = 1000)
descdist(PlantLength$Length_plant, discrete = FALSE, boot = 1000)
descdist(PlantLength$Length_plant, discrete = FALSE, boot = 100)
descdist(PlantLength$Length_plant, discrete = FALSE, boot = 10)
row.has.na <- apply(PlantLength, 1, function(x){any(is.na(x))})
sum(row.has.na)
PlantLength.filtered <- PlantLength[!row.has.na,]# Removed all the rows with NAs
car::qqp(PlantLength$Length_plant, "norm")
shapiro.test(PlantLength$Length_plant)
car::qqp(PlantLength$Length_plant, "norm")
par(mfrow = c(1,1))
descdist(PlantLength$Length_plant, discrete = FALSE, boot = 10)
descdist(PlantLength.filtered$Length_plant, discrete = FALSE, boot = 10)
descdist(PlantLength.filtered$Length_plant, discrete = FALSE, boot = 1000)
descdist(PlantLength.filtered$Length_plant, discrete = FALSE, boot = 1000)
f1g <- fitdist(PlantLength.filtered$Length_plant, "lnorm")
f2g <- fitdist(PlantLength.filtered$Length_plant, "norm")
f2g <- fitdist(PlantLength.filtered$Length_plant, "norm")
f3g <- fitdist(PlantLength.filtered$Length_plant, "gamma")
f4g <- fitdist(PlantLength.filtered$Length_plant, "weibull")
f1g$aic
f2g$aic
f3g$aic
f4g$aic
mod1<-glmer(Length_plant~Location*Species+(1|Population), data=PlantLength)
mod1<-glmer(Length_plant~Location*Species+(1|Pop), data=PlantLength)
mod1<-lmer(Length_plant~Location*Species+(1|Pop), data=PlantLength.filtered)
bc<-boxcox(mod1, lambda = seq(-2, 2, 0.1))
bc<-boxcox(mod1, lambda = seq(-2, 2, 0.1))
mod1<-lm(Length_plant~Location*Species, data=PlantLength.filtered)
bc<-boxcox(mod1, lambda = seq(-2, 2, 0.1))
lambda <- bc$x[which.max(bc$y)]
IBT_data <- cbind(IBT_data, ((IBT_data$sp_rich^lambda)-1)/lambda)
PlantLength.filtered <- cbind(PlantLength.filtered, ((PlantLength.filtered$Length_plant^lambda)-1)/lambda)
View(PlantLength.filtered)
names(PlantLength.filtered)[5] <- "Yprime"
mod1BC <- lm(Yprime~Location*Species, data=PlantLength.filtered)
par(mfrow = c(2, 2))
plot(mod1BC)
boxcox(mod1, lambda = seq(-2, 2, 0.1))
lambda
car::qqp(PlantLength.filtered$Length_plant, "norm")
shapiro.test(PlantLength.filtered$Length_plant)
car::qqp(PlantLength.filtered$Length_plant, "norm")
car::qqp(PlantLength.filtered$Yprime, "norm")
car::qqp(log(PlantLength.filtered$Length_plant), "norm")
shapiro.test(log(PlantLength.filtered$Length_plant))
# Multicolinearity?
vif(mod1BC)
mod1BC <- lm(Yprime~Location*Species, data=PlantLength.filtered)
par(mfrow = c(2, 2))
plot(mod1BC)
# Multicolinearity?
vif(mod1BC)
# Multicolinearity?
car::vif(mod1BC)
sqrt(car::vif(mod1BC)) > 2
mod1<-lm(Length_plant~Location+Species, data=PlantLength.filtered)
mod1BC <- lm(Yprime~Location+Species, data=PlantLength.filtered)
# Multicolinearity?
car::vif(mod1BC)
sqrt(car::vif(mod1BC)) > 2
mod1BC <- lm(Yprime~Location*Species, data=PlantLength.filtered)
# Multicolinearity?
car::vif(mod1BC)
sqrt(car::vif(mod1BC)) > 2
mod1<-lmer(log(Length_plant)~Location*Species+(1|Pop), data=PlantLength.filtered)
mod2<-lmer(log(Length_plant)~Location+(1|Pop), data=PlantLength.filtered)
mod3<-lmer(log(Length_plant)~1+(1|Pop), data=PlantLength.filtered)
mod.sel(mod1,mod2,mod3)
AICres <- model.sel(mod1,mod2,mod3)
AICres
?rsquared
??rsquared
r.squaredLR(mod1)
mod1
summary(mod1)
confint(mod1)
# Discriminant function analysis is used (general LDA format) because i have a cat. dependent and a binary independent. (it needs binary or continuous!)
# you might have to bin covers because it only works with categorical, so 0-5% none, 6-40 low etc.
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,20,50,80,100), labels = c("None", "Med_Low", "Med_High", "Overtaken"))
table(FloristicSurvey$GM_Coverage_category)
#LDA
FloristicSurveysmall<-data.frame(FloristicSurvey[,4:56])
FloristicSurveysmall <- FloristicSurveysmall[,-c(42,45)]
FloristicSurveyLDA <- lda(GM_Coverage_category ~., data=FloristicSurveysmall)
# Extract scaling vectors
scalvec<-data.frame(FloristicSurveyLDA$scaling)
# Extract predictions
FloristicSurveyLDAval <- data.frame(predict(FloristicSurveyLDA)$x)
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1, y=LD2, group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
#test significance of axis
anova(lm(FloristicSurveyLDAval$LD1~FloristicSurveysmall$GM_Coverage_category))
anova(lm(FloristicSurveyLDAval$LD2~FloristicSurveysmall$GM_Coverage_category))
#LDA WITHOUT A. PETIOLATA
FloristicSurveysmall<-data.frame(FloristicSurvey[,4:56])
# Linear discriminant function analysis
FloristicSurveysmall[10]<-NULL
FloristicSurveysmall[c(41,44)] <- NULL
FloristicSurveyLDA<-lda(GM_Coverage_category ~ ., data=FloristicSurveysmall)
# Extract scaling vectors
scalvec<-data.frame(FloristicSurveyLDA$scaling)
# Extract predictions
FloristicSurveyLDAval <- data.frame(predict(FloristicSurveyLDA)$x)
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
#test significance of axis
anova(lm(FloristicSurveyLDAval$LD1~FloristicSurveysmall$GM_Coverage_category))
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
#test significance of axis
anova(lm(FloristicSurveyLDAval$LD1~FloristicSurveysmall$GM_Coverage_category))
anova(lm(FloristicSurveyLDAval$LD2~FloristicSurveysmall$GM_Coverage_category))
# Ward Hierarchical Clustering with Bootstrapped p values
#do they cluster by population?
FloristicSurvey[is.na(FloristicSurvey)] <- 0
mydata<-t(data.frame(FloristicSurvey[,1],FloristicSurvey[,4:55]))
my.names <- mydata[1,]
colnames(mydata) <- my.names
mydata <- mydata[-1,]
d <- dist(t(mydata), method = "euclidean") # distance matrix
fit <- hclust(d, method = "ward.D")
plot(fit)
plot(fit,cex=3)
plot(fit,cex=1)
plot(fit,cex=0.5)
plot(fit,cex=0.4)
plot(fit,cex=0.4)
plot(cut(hcd, h=10)$upper,
main="Upper tree of cut at h=75")
plot(cut(fit, h=10)$upper,
main="Upper tree of cut at h=75")
plot(cut(fit, h=100)$upper,
main="Upper tree of cut at h=75")
plot(cut(fit, h=100)$upper, main="Upper tree of cut at h=75")
fit <- hclust(d, method = "ward.D")
fitd <- as.dendrogram(fit)
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=75")
plot(cut(fitd, h=10)$lower[[2]],
main="Second branch of lower tree with cut at h=75")
plot(fit,cex=0.4,main="Clustering with populations")
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=75")
plot(cut(fitd, h=15)$upper, main="Upper tree of cut at h=75")
par(mfrow=c(5,1))
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=15)$upper, main="Upper tree of cut at h=15")
plot(cut(fitd, h=15)$lower[[1]], main="First branch of lower tree with cut at h=15")
plot(fit,cex=0.7,main="Clustering with populations")
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=15)$upper,cex=0.7, main="Upper tree of cut at h=15")
par(mfrow=c(3,2))
plot(cut(fitd, h=15)$lower[[1]],cex=0.7, main="First branch of lower tree with cut at h=15")
plot(cut(fitd, h=15)$lower[[1]],cex=0.4, main="First branch of lower tree with cut at h=15")
??plot
?plot
plot(cut(fitd, h=15)$lower[[1]],cex=I(0.4), main="First branch of lower tree with cut at h=15")
plot(cut(fitd, h=10)$lower[[4]], main="Fourth branch of lower tree with cut at h=10")
par(mfrow=c(3,2))
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[4]], main="Fourth branch of lower tree with cut at h=10")
plot(fit,cex=0.4)
#do they cluster by GM coverage?
FloristicSurvey[is.na(FloristicSurvey)] <- 0
#this will just make the dendogram easier to see
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,5,30,50,70,95,100), labels = c("N", "L", "ML", "MH", "H", "F"))
mydata<-t(data.frame(FloristicSurvey[,56],FloristicSurvey[,4:55]))
my.names <- mydata[1,]
colnames(mydata) <- my.names
mydata <- mydata[-1,]
d <- dist(t(mydata), method = "euclidean") # distance matrix
fit <- hclust(d, method = "ward.D")
plot(fit,cex=0.4)
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,5,30,50,70,95,100), labels = c("None", "Low", "Med_Low", "Med_High", "High", "Overtaken"))
fit <- hclust(d, method = "ward.D")
fitd <- as.dendrogram(fit)
par(mfrow=c(3,2))
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
par(mfrow=c(3,2))
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[4]], main="Fourth branch of lower tree with cut at h=10")
#this will just make the dendogram easier to see
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,25,50,75,100), labels = c("None", "ML", "MH", "High"))
mydata<-t(data.frame(FloristicSurvey[,56],FloristicSurvey[,4:55]))
my.names <- mydata[1,]
colnames(mydata) <- my.names
mydata <- mydata[-1,]
d <- dist(t(mydata), method = "euclidean") # distance matrix
fit <- hclust(d, method = "ward.D")
fitd <- as.dendrogram(fit)
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,5,30,50,70,95,100), labels = c("None", "Low", "Med_Low", "Med_High", "High", "Overtaken"))
par(mfrow=c(3,2))
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
par(mfrow=c(3,2))
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[4]], main="Fourth branch of lower tree with cut at h=10")
# Discriminant function analysis is used (general LDA format) because i have a cat. dependent and a binary independent. (it needs binary or continuous!)
# you might have to bin covers because it only works with categorical, so 0-5% none, 6-40 low etc.
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,25,50,75,100), labels = c("None", "Med_Low", "Med_High", "Overtaken"))
table(FloristicSurvey$GM_Coverage_category)
#LDA
FloristicSurveysmall<-data.frame(FloristicSurvey[,4:56])
FloristicSurveysmall <- FloristicSurveysmall[,-c(42,45)]
FloristicSurveyLDA <- lda(GM_Coverage_category ~., data=FloristicSurveysmall)
# Extract scaling vectors
scalvec<-data.frame(FloristicSurveyLDA$scaling)
# Extract predictions
FloristicSurveyLDAval <- data.frame(predict(FloristicSurveyLDA)$x)
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1, y=LD2, group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
#test significance of axis
anova(lm(FloristicSurveyLDAval$LD1~FloristicSurveysmall$GM_Coverage_category))
anova(lm(FloristicSurveyLDAval$LD2~FloristicSurveysmall$GM_Coverage_category))
#LDA WITHOUT A. PETIOLATA
FloristicSurveysmall<-data.frame(FloristicSurvey[,4:56])
# Linear discriminant function analysis
FloristicSurveysmall[10]<-NULL
FloristicSurveysmall[c(41,44)] <- NULL
FloristicSurveyLDA<-lda(GM_Coverage_category ~ ., data=FloristicSurveysmall)
# Extract scaling vectors
scalvec<-data.frame(FloristicSurveyLDA$scaling)
# Extract predictions
FloristicSurveyLDAval <- data.frame(predict(FloristicSurveyLDA)$x)
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
# data for labelling the ellipse
NMDS.mean.FloristicSurvey=aggregate(FloristicSurvey.NMDS.data[ ,c("NMDS1", "NMDS2")],
list(group = FloristicSurvey.NMDS.data$GM_Coverage), mean)
## finally plotting.
mult <- 1 #multiplier for the arrows and text for envfit below. You can change this and then rerun the plot command.
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+ #sets up the plot. brackets around the entire thing to make it draw automatically
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+ #this is the ellipse, seperate ones by Site. If you didn't change the "alpha" (the shade) then you need to keep the "group
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+ #sets the shade for the ellipse
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1) + #puts the site points in from the ordination, shape determined by site, size refers to size of point
# geom_text(data=spps2, aes(x=spps2$NMDS1, y=spps2$NMDS2, label=species), size = 3.3, hjust=1.1)+ #labelling the species. hjust used to shift them slightly from their points
#annotate("text",x = NMDS.mean$NMDS1,y = NMDS.mean$NMDS2,label=NMDS.mean$group) + #labels for the centroids - I haven't used this since we have a legend. but you could also dithc the legend, but plot will get v messy
#geom_segment(data = env.scores.FloristicSurvey,
#             aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),
#             arrow = arrow(length = unit(0.25, "cm")), colour = "grey") + #arrows for envfit.  doubled the length for similarity to the plot() function. NB check ?envfit regarding arrow length if not familiar with lengths
#geom_text(data = env.scores.FloristicSurvey, #labels the environmental variable arrows * "mult" as for the arrows
#          aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),
#          size = 5,
#          hjust = -0.5)+
scale_shape_manual(values = c(1,8,19,5,6,7))+ #sets the shape of the plot points instead of using whatever ggplot2 automatically provides
coord_cartesian(xlim = c(-1,1.5))+  ## NB this changes the visible area of the plot only (this is a good thing, apparently). Can also specify ylim. Here in case you want to set xaxis manually.
theme_simple()
# data for labelling the ellipse
NMDS.mean.FloristicSurvey=aggregate(FloristicSurvey.NMDS.data[ ,c("NMDS1", "NMDS2")],
list(group = FloristicSurvey.NMDS.data$GM_Coverage), mean)
## finally plotting.
mult <- 1 #multiplier for the arrows and text for envfit below. You can change this and then rerun the plot command.
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+ #sets up the plot. brackets around the entire thing to make it draw automatically
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+ #this is the ellipse, seperate ones by Site. If you didn't change the "alpha" (the shade) then you need to keep the "group
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+ #sets the shade for the ellipse
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1) + #puts the site points in from the ordination, shape determined by site, size refers to size of point
# geom_text(data=spps2, aes(x=spps2$NMDS1, y=spps2$NMDS2, label=species), size = 3.3, hjust=1.1)+ #labelling the species. hjust used to shift them slightly from their points
#annotate("text",x = NMDS.mean$NMDS1,y = NMDS.mean$NMDS2,label=NMDS.mean$group) + #labels for the centroids - I haven't used this since we have a legend. but you could also dithc the legend, but plot will get v messy
#geom_segment(data = env.scores.FloristicSurvey,
#             aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),
#             arrow = arrow(length = unit(0.25, "cm")), colour = "grey") + #arrows for envfit.  doubled the length for similarity to the plot() function. NB check ?envfit regarding arrow length if not familiar with lengths
#geom_text(data = env.scores.FloristicSurvey, #labels the environmental variable arrows * "mult" as for the arrows
#          aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),
#          size = 5,
#          hjust = -0.5)+
scale_shape_manual(values = c(1,8,19,5,6,7))+ #sets the shape of the plot points instead of using whatever ggplot2 automatically provides
coord_cartesian(xlim = c(-1,1.5))+  ## NB this changes the visible area of the plot only (this is a good thing, apparently). Can also specify ylim. Here in case you want to set xaxis manually.
theme_simple()
# https://jonlefcheck.net/2012/10/24/nmds-tutorial-in-r/
# https://oliviarata.wordpress.com/2014/04/17/ordinations-in-ggplot2/
#Make a matrix with no row or column equal to 0 (do not enclude the env variable (GM COVERAGE))
M <- as.matrix(FloristicSurvey[1:198,4:55])
M[is.na(M)] <- 0
rownames(M) <- FloristicSurvey$Population
which( colSums(M)==0 )
which( rowSums(M)==0 )
#Now that you know which column must be taken out, redo the matrix but with the last column, then remove the rows and columns =0
#I did this because the previous method doesnt work with the characters in the GM_COVERAGE column.
M <- as.matrix(FloristicSurvey[1:198,4:56])
M[is.na(M)] <- 0
rownames(M) <- FloristicSurvey$Population
M<-M[,-45]
M<-M[-130,]
M<-M[-133,]
M<-M[-132,]
# Now I'll make the env column a vector on its own, but the previous colde now allows it to be in the same order as the matrix im using for distances.
GM_coverage_df <- data.frame(M[,52])
M<-M[,-52]
class(M) <- "numeric"
# with vegdist from Bray to seroeson: add binary = T
dist_FloristicSurvey <- vegdist(M, method = "bray", binary = T)
#The metaMDS analysis could have done the distance matrix internally but i would rather control it since i have presence/abscence
meta.nmds.FloristicSurvey <- metaMDS(dist_FloristicSurvey)
# Non convergence with only 20 tries. lets increase that then
meta.nmds.FloristicSurvey2D <- metaMDS(dist_FloristicSurvey, k=2, trymax = 1000)
#data for plotting
##NMDS points
FloristicSurvey.NMDS.data<-GM_coverage_df
FloristicSurvey.NMDS.data$NMDS1<-meta.nmds.FloristicSurvey2D$points[ ,1]
FloristicSurvey.NMDS.data$NMDS2<-meta.nmds.FloristicSurvey2D$points[ ,2]
colnames(FloristicSurvey.NMDS.data)[1] <- "GM_Coverage"
# data for the envfit arrows
env.scores.FloristicSurvey <- as.data.frame(scores(FloristicSurvey_envfit, display = "vectors")) #extracts relevant scores from envifit
env.scores.FloristicSurvey <- cbind(env.scores.FloristicSurvey, env.variables = rownames(env.scores.FloristicSurvey)) #and then gives them their names
# function for ellipsess - just run this, is used later
#taken from the excellent stackoverflow Q+A: http://stackoverflow.com/questions/13794419/plotting-ordiellipse-function-from-vegan-package-onto-nmds-plot-created-in-ggplo
veganCovEllipse <- function (cov, center = c(0, 0), scale = 1, npoints = 100)
{
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))
}
#data for ellipse, use GM coverage
df_ell.FSurvey.GM_coverage <- data.frame() #sets up a data frame before running the function.
for(g in levels(FloristicSurvey.NMDS.data$GM_Coverage)){
df_ell.FSurvey.GM_coverage <- rbind(df_ell.FSurvey.GM_coverage, cbind(as.data.frame(with(FloristicSurvey.NMDS.data [FloristicSurvey.NMDS.data$GM_Coverage==g,],
veganCovEllipse(cov.wt(cbind(NMDS1,NMDS2),wt=rep(1/length(NMDS1),length(NMDS1)))$cov,center=c(mean(NMDS1),mean(NMDS2)))))
,GM_coverage=g))
}
# data for labelling the ellipse
NMDS.mean.FloristicSurvey=aggregate(FloristicSurvey.NMDS.data[ ,c("NMDS1", "NMDS2")],
list(group = FloristicSurvey.NMDS.data$GM_Coverage), mean)
## finally plotting.
mult <- 1 #multiplier for the arrows and text for envfit below. You can change this and then rerun the plot command.
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+ #sets up the plot. brackets around the entire thing to make it draw automatically
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+ #this is the ellipse, seperate ones by Site. If you didn't change the "alpha" (the shade) then you need to keep the "group
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+ #sets the shade for the ellipse
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1) + #puts the site points in from the ordination, shape determined by site, size refers to size of point
# geom_text(data=spps2, aes(x=spps2$NMDS1, y=spps2$NMDS2, label=species), size = 3.3, hjust=1.1)+ #labelling the species. hjust used to shift them slightly from their points
#annotate("text",x = NMDS.mean$NMDS1,y = NMDS.mean$NMDS2,label=NMDS.mean$group) + #labels for the centroids - I haven't used this since we have a legend. but you could also dithc the legend, but plot will get v messy
#geom_segment(data = env.scores.FloristicSurvey,
#             aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),
#             arrow = arrow(length = unit(0.25, "cm")), colour = "grey") + #arrows for envfit.  doubled the length for similarity to the plot() function. NB check ?envfit regarding arrow length if not familiar with lengths
#geom_text(data = env.scores.FloristicSurvey, #labels the environmental variable arrows * "mult" as for the arrows
#          aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),
#          size = 5,
#          hjust = -0.5)+
scale_shape_manual(values = c(1,8,19,5,6,7))+ #sets the shape of the plot points instead of using whatever ggplot2 automatically provides
coord_cartesian(xlim = c(-1,1.5))+  ## NB this changes the visible area of the plot only (this is a good thing, apparently). Can also specify ylim. Here in case you want to set xaxis manually.
theme_simple()
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+ #sets up the plot. brackets around the entire thing to make it draw automatically
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+ #this is the ellipse, seperate ones by Site. If you didn't change the "alpha" (the shade) then you need to keep the "group
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+ #sets the shade for the ellipse
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1) + #puts the site points in from the ordination, shape determined by site, size refers to size of point
geom_text(data=spps2, aes(x=spps2$NMDS1, y=spps2$NMDS2, label=species), size = 3.3, hjust=1.1)+ #labelling the species. hjust used to shift them slightly from their points
annotate("text",x = NMDS.mean$NMDS1,y = NMDS.mean$NMDS2,label=NMDS.mean$group) + #labels for the centroids - I haven't used this since we have a legend. but you could also dithc the legend, but plot will get v messy
geom_segment(data = env.scores.FloristicSurvey,aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),arrow = arrow(length = unit(0.25, "cm")), colour = "grey") + #arrows for envfit.  doubled the length for similarity to the plot() function. NB check ?envfit regarding arrow length if not familiar with lengths
geom_text(data = env.scores.FloristicSurvey,aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),size = 5, hjust = -0.5)+ #labels the environmental variable arrows * "mult" as for the arrows
scale_shape_manual(values = c(1,8,19,5,6,7))+ #sets the shape of the plot points instead of using whatever ggplot2 automatically provides
coord_cartesian(xlim = c(-1,1.5))+  # NB this changes the visible area of the plot only (this is a good thing, apparently). Can also specify ylim. Here in case you want to set xaxis manually.
theme_simple()
## finally plotting.
mult <- 1 #multiplier for the arrows and text for envfit below. You can change this and then rerun the plot command.
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+ #sets up the plot. brackets around the entire thing to make it draw automatically
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+ #this is the ellipse, seperate ones by Site. If you didn't change the "alpha" (the shade) then you need to keep the "group
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+ #sets the shade for the ellipse
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1) + #puts the site points in from the ordination, shape determined by site, size refers to size of point
geom_text(data=spps2, aes(x=spps2$NMDS1, y=spps2$NMDS2, label=species), size = 3.3, hjust=1.1)+ #labelling the species. hjust used to shift them slightly from their points
annotate("text",x = NMDS.mean$NMDS1,y = NMDS.mean$NMDS2,label=NMDS.mean$group) + #labels for the centroids - I haven't used this since we have a legend. but you could also dithc the legend, but plot will get v messy
geom_segment(data = env.scores.FloristicSurvey,aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),arrow = arrow(length = unit(0.25, "cm")), colour = "grey") + #arrows for envfit.  doubled the length for similarity to the plot() function. NB check ?envfit regarding arrow length if not familiar with lengths
geom_text(data = env.scores.FloristicSurvey,aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),size = 5, hjust = -0.5)+ #labels the environmental variable arrows * "mult" as for the arrows
scale_shape_manual(values = c(1,8,19,5,6,7))+ #sets the shape of the plot points instead of using whatever ggplot2 automatically provides
coord_cartesian(xlim = c(-1,1.5))+  # NB this changes the visible area of the plot only (this is a good thing, apparently). Can also specify ylim. Here in case you want to set xaxis manually.
theme_simple()
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+ #sets up the plot. brackets around the entire thing to make it draw automatically
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+ #this is the ellipse, seperate ones by Site. If you didn't change the "alpha" (the shade) then you need to keep the "group
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+ #sets the shade for the ellipse
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1) + #puts the site points in from the ordination, shape determined by site, size refers to size of point
#geom_text(data=spps2, aes(x=spps2$NMDS1, y=spps2$NMDS2, label=species), size = 3.3, hjust=1.1)+ #labelling the species. hjust used to shift them slightly from their points
annotate("text",x = NMDS.mean$NMDS1,y = NMDS.mean$NMDS2,label=NMDS.mean$group) + #labels for the centroids - I haven't used this since we have a legend. but you could also dithc the legend, but plot will get v messy
geom_segment(data = env.scores.FloristicSurvey,aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),arrow = arrow(length = unit(0.25, "cm")), colour = "grey") + #arrows for envfit.  doubled the length for similarity to the plot() function. NB check ?envfit regarding arrow length if not familiar with lengths
geom_text(data = env.scores.FloristicSurvey,aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),size = 5, hjust = -0.5)+ #labels the environmental variable arrows * "mult" as for the arrows
scale_shape_manual(values = c(1,8,19,5,6,7))+ #sets the shape of the plot points instead of using whatever ggplot2 automatically provides
coord_cartesian(xlim = c(-1,1.5))+  # NB this changes the visible area of the plot only (this is a good thing, apparently). Can also specify ylim. Here in case you want to set xaxis manually.
theme_simple()
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+ #sets up the plot. brackets around the entire thing to make it draw automatically
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+ #this is the ellipse, seperate ones by Site. If you didn't change the "alpha" (the shade) then you need to keep the "group
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+ #sets the shade for the ellipse
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1)+ #puts the site points in from the ordination, shape determined by site, size refers to size of point
#geom_text(data=spps2, aes(x=spps2$NMDS1, y=spps2$NMDS2, label=species), size = 3.3, hjust=1.1)+ #labelling the species. hjust used to shift them slightly from their points
annotate("text",x = NMDS.mean.FloristicSurvey$NMDS1,y = NMDS.mean.FloristicSurvey$NMDS2,label=NMDS.mean.FloristicSurvey$group)+ #labels for the centroids - I haven't used this since we have a legend. but you could also dithc the legend, but plot will get v messy
geom_segment(data = env.scores.FloristicSurvey,aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),arrow = arrow(length = unit(0.25, "cm")), colour = "grey") + #arrows for envfit.  doubled the length for similarity to the plot() function. NB check ?envfit regarding arrow length if not familiar with lengths
geom_text(data = env.scores.FloristicSurvey,aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),size = 5, hjust = -0.5)+ #labels the environmental variable arrows * "mult" as for the arrows
scale_shape_manual(values = c(1,8,19,5,6,7))+ #sets the shape of the plot points instead of using whatever ggplot2 automatically provides
coord_cartesian(xlim = c(-1,1.5))+  # NB this changes the visible area of the plot only (this is a good thing, apparently). Can also specify ylim. Here in case you want to set xaxis manually.
theme_simple()
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+ #sets up the plot. brackets around the entire thing to make it draw automatically
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+ #this is the ellipse, seperate ones by Site. If you didn't change the "alpha" (the shade) then you need to keep the "group
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+ #sets the shade for the ellipse
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1)+ #puts the site points in from the ordination, shape determined by site, size refers to size of point
#geom_text(data=spps2, aes(x=spps2$NMDS1, y=spps2$NMDS2, label=species), size = 3.3, hjust=1.1)+ #labelling the species. hjust used to shift them slightly from their points
annotate("text",x = NMDS.mean.FloristicSurvey$NMDS1,y = NMDS.mean.FloristicSurvey$NMDS2,label=NMDS.mean.FloristicSurvey$group)+ #labels for the centroids - I haven't used this since we have a legend. but you could also dithc the legend, but plot will get v messy
geom_segment(data = env.scores.FloristicSurvey,aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),arrow = arrow(length = unit(0.25, "cm")), colour = "grey") + #arrows for envfit.  doubled the length for similarity to the plot() function. NB check ?envfit regarding arrow length if not familiar with lengths
geom_text(data = env.scores.FloristicSurvey,aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),size = 5, hjust = -0.5)+ #labels the environmental variable arrows * "mult" as for the arrows
scale_shape_manual(values = c(1,8,19,5,6,7))+ #sets the shape of the plot points instead of using whatever ggplot2 automatically provides
coord_cartesian(xlim = c(-1,1.5)) # NB this changes the visible area of the plot only (this is a good thing, apparently). Can also specify ylim. Here in case you want to set xaxis manually.
## finally plotting.
mult <- 1 #multiplier for the arrows and text for envfit below. You can change this and then rerun the plot command.
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7, 0.8, 0.9))+
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1)+
annotate("text",x = NMDS.mean.FloristicSurvey$NMDS1,y = NMDS.mean.FloristicSurvey$NMDS2,label=NMDS.mean.FloristicSurvey$group)+
geom_segment(data = env.scores.FloristicSurvey,aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),arrow = arrow(length = unit(0.25, "cm")), colour = "grey")+
geom_text(data = env.scores.FloristicSurvey,aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),size = 5, hjust = -0.5)+
scale_shape_manual(values = c(1,8,19,5,6,7))+
coord_cartesian(xlim = c(-1,1.5))
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7))+
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1)+
annotate("text",x = NMDS.mean.FloristicSurvey$NMDS1,y = NMDS.mean.FloristicSurvey$NMDS2,label=NMDS.mean.FloristicSurvey$group)+
geom_segment(data = env.scores.FloristicSurvey,aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),arrow = arrow(length = unit(0.25, "cm")), colour = "grey")+
geom_text(data = env.scores.FloristicSurvey,aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),size = 5, hjust = -0.5)+
scale_shape_manual(values = c(1,8,19,5,6,7))+
coord_cartesian(xlim = c(-1,1.5))
FloristicSurvey.nmds.gg1 <- ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, alpha=df_ell.FSurvey.GM_coverage$GM_coverage))+
scale_alpha_manual(guide = FALSE,values=c(0.3, 0.5, 0.6, 0.7))+
geom_point( aes(shape = FloristicSurvey.NMDS.data$GM_Coverage), size = 1)+
annotate("text",x = NMDS.mean.FloristicSurvey$NMDS1,y = NMDS.mean.FloristicSurvey$NMDS2,label=NMDS.mean.FloristicSurvey$group)+
geom_segment(data = env.scores.FloristicSurvey,aes(x = 0, xend = mult*env.scores.FloristicSurvey$NMDS1, y = 0, yend = mult*env.scores.FloristicSurvey$NMDS2),arrow = arrow(length = unit(0.25, "cm")), colour = "grey")+
geom_text(data = env.scores.FloristicSurvey,aes(x = mult*env.scores.FloristicSurvey$NMDS1, y = mult*env.scores.FloristicSurvey$NMDS2, label=env.variables),size = 5, hjust = -0.5)+
scale_shape_manual(values = c(1,8,19,5))+
coord_cartesian(xlim = c(-1,1.5))
par(mfrow=c(2,2))
ggplot(Soil_characteristics, aes(Location,Agg_stability,fill=Location))+ geom_boxplot() +
theme_simple()
ggplot(Soil_characteristics, aes(Location,pH,fill=Location))+ geom_boxplot() +
theme_simple()
ggplot(Soil_characteristics, aes(Location,C_percent,fill=Location))+ geom_boxplot() +
theme_simple()
ggplot(Soil_characteristics, aes(Location,N_percent,fill=Location))+ geom_boxplot() +
theme_simple()
GM_coverage_df
FloristicSurvey_envfit
# envfit for the 2D
FloristicSurvey_envfit <- envfit(meta.nmds.FloristicSurvey2D, env = GM_coverage_df, perm = 999) #standard envfit
FloristicSurvey_envfit
meta.nmds.FloristicSurvey2D <- metaMDS(dist_FloristicSurvey, k=2, trymax = 1000)
meta.nmds.FloristicSurvey2D <- metaMDS(dist_FloristicSurvey, k=2, trymax = 1000, verbose=F)
meta.nmds.FloristicSurvey2D$points[ ,1]
#data for plotting
##NMDS points
FloristicSurvey.NMDS.data<-GM_coverage_df
FloristicSurvey.NMDS.data$NMDS1<-meta.nmds.FloristicSurvey2D$points[ ,1]
FloristicSurvey.NMDS.data$NMDS2<-meta.nmds.FloristicSurvey2D$points[ ,2]
colnames(FloristicSurvey.NMDS.data)[1] <- "GM_Coverage"
meta.nmds.FloristicSurvey2D <- metaMDS(dist_FloristicSurvey, k=2, trymax = 1000)
