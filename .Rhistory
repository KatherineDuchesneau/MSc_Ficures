library(MASS)
library(MuMIn)
library(emmeans)
library(boot)
library(brms)
library(tidyverse)
library(lme4)
library(MASS)
library(MuMIn)
library(emmeans)
library(boot)
library(brms)
library(loo)
library(fitdistrplus)
library(mefa)
library(ggbiplot)
library(pvclust)
library(vegan)
library(ggbiplot)
library(lme4)
library(MASS)
library(MuMIn)
library(emmeans)
library(boot)
library(brms)
library(loo)
library(fitdistrplus)
library(mefa)
library(ggbiplot)
library(pvclust)
library(vegan)
library(ggbiplot)
library(factoextra)
library(glmmADMB)
library(car)
# Ward Hierarchical Clustering with Bootstrapped p values
#do they cluster by population?
FloristicSurvey[is.na(FloristicSurvey)] <- 0
mydata<-t(data.frame(FloristicSurvey[,1],FloristicSurvey[,4:55]))
my.names <- mydata[1,]
colnames(mydata) <- my.names
mydata <- mydata[-1,]
d <- dist(t(mydata), method = "euclidean") # distance matrix
fit <- hclust(d, method = "ward.D")
fitd <- as.dendrogram(fit)
par(mfrow=c(3,2))
plot(fit,cex=0.4,main="Clustering with populations")
plot(fit,cex=0.4,main="Clustering with populations")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[4]], main="Fourth branch of lower tree with cut at h=10")
plot(fit,cex=0.4,main="Clustering with coverage")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
par(mfrow=c(3,2))
plot(fit,cex=0.4,main="Clustering with coverage")
plot(fit,cex=0.4,main="Clustering with coverage")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[4]], main="Fourth branch of lower tree with cut at h=10")
#do they cluster by GM coverage?
FloristicSurvey[is.na(FloristicSurvey)] <- 0
#this will just make the dendogram easier to see
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,25,50,75,100), labels = c("None", "ML", "MH", "High"))
mydata<-t(data.frame(FloristicSurvey[,56],FloristicSurvey[,4:55]))
my.names <- mydata[1,]
colnames(mydata) <- my.names
mydata <- mydata[-1,]
d <- dist(t(mydata), method = "euclidean") # distance matrix
fit <- hclust(d, method = "ward.D")
fitd <- as.dendrogram(fit)
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,5,30,50,70,95,100), labels = c("None", "Low", "Med_Low", "Med_High", "High", "Overtaken"))
par(mfrow=c(3,2))
plot(fit,cex=0.4,main="Clustering with coverage")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[4]], main="Fourth branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[3]], main="Third branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[2]], main="Second branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(cut(fitd, h=10)$upper, main="Upper tree of cut at h=10")
plot(cut(fitd, h=10)$lower[[1]], main="First branch of lower tree with cut at h=10")
plot(fit,cex=0.4,main="Clustering with coverage")
FloristicSurvey<-FloristicSurvey[,-56]
FloristicSurvey.pca <- prcomp(FloristicSurvey[,4:(ncol(FloristicSurvey))],center = TRUE)
summary(FloristicSurvey.pca)
factoextra::fviz_eig(FloristicSurvey.pca,addlabels=TRUE,hjust = -0.3)+theme_simple()
round(FloristicSurvey.pca$sdev^2/sum(FloristicSurvey.pca$sdev^2)*100,2)
View(FloristicSurvey)
FloristicSurvey$Population<-as.factor(FloristicSurvey$Population) # Make the population a factor and not an interger
FloristicSurvey[is.na(FloristicSurvey)] <- 0
FloristicSurvey <-read.csv("CSV/May_2017_FloristicSurvey_summer2016.csv", sep="\t")
FloristicSurvey$Population<-as.factor(FloristicSurvey$Population) # Make the population a factor and not an interger
FloristicSurvey[is.na(FloristicSurvey)] <- 0
sum(row.has.na <- apply(FloristicSurvey, 1, function(x){any(is.na(x))}))
# Discriminant function analysis is used (general LDA format) because i have a cat. dependent and a binary independent. (it needs binary or continuous!)
# you might have to bin covers because it only works with categorical, so 0-5% none, 6-40 low etc.
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,25,50,75,100), labels = c("None", "Med_Low", "Med_High", "Overtaken"))
table(FloristicSurvey$GM_Coverage_category)
FloristicSurvey.pca <- prcomp(FloristicSurvey[,4:(ncol(FloristicSurvey)-1)],center = TRUE)
summary(FloristicSurvey.pca)
factoextra::fviz_eig(FloristicSurvey.pca,addlabels=TRUE,hjust = -0.3)+theme_simple()
library(ggfortify)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = 'Gm_Coverage_category', label = TRUE, label.size = 3)
FloristicSurvey
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = FloristicSurvey$Gm_Coverage_category, label = TRUE, label.size = 3)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = FloristicSurvey$Gm_Coverage_category, label.size = 3)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, color = FloristicSurvey$Gm_Coverage_category, label.size = 3)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = FloristicSurvey$Gm_Coverage_category, label = TRUE, label.size = 3)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = "Gm_Coverage_category", label = TRUE, label.size = 3)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = "GM_Coverage_category", label = TRUE, label.size = 3)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = "GM_Coverage_category", label.size = 3)
# Discriminant function analysis is used (general LDA format) because i have a cat. dependent and a binary independent. (it needs binary or continuous!)
# you might have to bin covers because it only works with categorical, so 0-5% none, 6-40 low etc.
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,20,40,60,80,100), labels = c("None", "Low","Medium", "High", "Overtaken"))
FloristicSurvey.pca <- prcomp(FloristicSurvey[,4:(ncol(FloristicSurvey)-1)],center = TRUE)
summary(FloristicSurvey.pca)
factoextra::fviz_eig(FloristicSurvey.pca,addlabels=TRUE,hjust = -0.3)+theme_simple()
library(ggfortify)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = "GM_Coverage_category", label.size = 3)
round(FloristicSurvey.pca$sdev^2/sum(FloristicSurvey.pca$sdev^2)*100,2)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = "GM_Coverage_category", label.size = 3)
autoplot(FloristicSurvey.pca, data = FloristicSurvey, colour = "GM_Coverage_category", label.size = 3)+theme_simple()
AICres <- model.sel(mod1,mod2,mod3)
row.has.na <- apply(PlantLength, 1, function(x){any(is.na(x))})
sum(row.has.na)
PlantLength.filtered <- PlantLength[!row.has.na,]# Removed all the rows with NAs
PlantLength.filtered$Pop <- as.factor(PlantLength.filtered$Pop)
car::qqp(PlantLength$Length_plant, "norm")
shapiro.test(PlantLength$Length_plant)
mod1<-lm(Length_plant~Location*Species, data=PlantLength.filtered)
bc<-boxcox(mod1, lambda = seq(-2, 2, 0.1))
lambda <- bc$x[which.max(bc$y)]
PlantLength.filtered <- cbind(PlantLength.filtered, ((PlantLength.filtered$Length_plant^lambda)-1)/lambda)
names(PlantLength.filtered)[length(PlantLength.filtered)] <- "Yprime"
mod1BC <- lm(Yprime~Location*Species, data=PlantLength.filtered)
par(mfrow = c(2, 2))
plot(mod1BC)
sqrt(car::vif(mod1BC)) > 2
mod1<-lmer(log(Length_plant)~Location*Species+(1|Pop), data=PlantLength.filtered)
mod2<-lmer(log(Length_plant)~Location+(1|Pop), data=PlantLength.filtered)
mod2<-lmer(log(Length_plant)~Location+(1|Pop), data=PlantLength.filtered)
mod3<-lmer(log(Length_plant)~1+(1|Pop), data=PlantLength.filtered)
AICres <- model.sel(mod1,mod2,mod3)
r.squaredLR(mod1)
summary(mod1)
confint(mod1)
avPlots(mod1)
car::avPlots(mod1)
AICres <- model.sel(mod1,mod2,mod3)
AICres
r.squaredLR(mod1)
confint(mod1)
mod1<-lmer(log(Length_plant)~Location*Species+(1|Pop), data=PlantLength.filtered)
mod1
summary(mod1)
confint(mod1)
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1, y=LD2, group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
# Discriminant function analysis is used (general LDA format) because i have a cat. dependent and a binary independent. (it needs binary or continuous!)
# you might have to bin covers because it only works with categorical, so 0-5% none, 6-40 low etc.
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,20,40,60,80,100), labels = c("None", "Low","Medium", "High", "Overtaken"))
#LDA
FloristicSurveysmall<-data.frame(FloristicSurvey[,4:56])
FloristicSurveysmall <- FloristicSurveysmall[,-c(42,45)]
FloristicSurveyLDA <- lda(GM_Coverage_category ~., data=FloristicSurveysmall)
# Extract scaling vectors
scalvec<-data.frame(FloristicSurveyLDA$scaling)
# Extract predictions
FloristicSurveyLDAval <- data.frame(predict(FloristicSurveyLDA)$x)
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1, y=LD2, group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
table(FloristicSurvey$GM_Coverage_category)
# Discriminant function analysis is used (general LDA format) because i have a cat. dependent and a binary independent. (it needs binary or continuous!)
# you might have to bin covers because it only works with categorical, so 0-5% none, 6-40 low etc.
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,25,60,80,100), labels = c("None","Medium", "High", "Overtaken"))
table(FloristicSurvey$GM_Coverage_category)
# [0-20] None
# ]20-40] low
# ]40-60] Medium
# ]60-80] high
# ]80-100] Overtaken
```{r}
#LDA
FloristicSurveysmall<-data.frame(FloristicSurvey[,4:56])
FloristicSurveysmall <- FloristicSurveysmall[,-c(42,45)]
FloristicSurveyLDA <- lda(GM_Coverage_category ~., data=FloristicSurveysmall)
# Extract scaling vectors
scalvec<-data.frame(FloristicSurveyLDA$scaling)
# Extract predictions
FloristicSurveyLDAval <- data.frame(predict(FloristicSurveyLDA)$x)
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1, y=LD2, group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
# Discriminant function analysis is used (general LDA format) because i have a cat. dependent and a binary independent. (it needs binary or continuous!)
# you might have to bin covers because it only works with categorical, so 0-5% none, 6-40 low etc.
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,25,50,75,100), labels = c("None to Low","Medium", "High", "Overtaken"))
table(FloristicSurvey$GM_Coverage_category)
# [0-20] None
# ]20-40] low
# ]40-60] Medium
# ]60-80] high
# ]80-100] Overtaken
```{r}
#LDA
FloristicSurveysmall<-data.frame(FloristicSurvey[,4:56])
FloristicSurveysmall <- FloristicSurveysmall[,-c(42,45)]
FloristicSurveyLDA <- lda(GM_Coverage_category ~., data=FloristicSurveysmall)
# Extract scaling vectors
scalvec<-data.frame(FloristicSurveyLDA$scaling)
# Extract predictions
FloristicSurveyLDAval <- data.frame(predict(FloristicSurveyLDA)$x)
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1, y=LD2, group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+theme_simple() +
theme(legend.title=element_blank())
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
theme(legend.title=element_blank())+
ggtitle("Linear Discriminant Analysis of Floristic composition/n in a Garlic mustard population")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+
labs(y="Total Biomass")
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
theme(legend.title=element_blank())+
ggtitle("Linear Discriminant Analysis of Floristic composition \n in a Garlic mustard population")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+
labs(y="Total Biomass")
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
theme(legend.title=element_blank())+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_brewer(palette="Dark2")
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_brewer(palette="Dark2")
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_brewer(palette="Dark2")
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_brewer(palette="Dark2")+ scale_fill_brewer(palette="Dark2")
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_manual(c("green","blue","orange","red"))+ scale_fill_manual(c("green","blue","orange","red"))
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_manual(values=c("green","blue","orange","red"))+ scale_fill_manual(values=c("green","blue","orange","red"))
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_manual(values=c("light green","light blue","orange","red"))+ scale_fill_manual(values=c("green","blue","orange","red"))
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_manual(values=c("dark green","dark blue","orange4","rosybrown"))+ scale_fill_manual(values=c("dark green","dark blue","orange4","rosybrown"))
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_manual(values=c("dark green","dark blue","orange4","red4"))+ scale_fill_manual(values=c("dark green","dark blue","orange4","red4"))
# Plot results
ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_manual(values=c("green3"," blue3","orange3","red3"))+ scale_fill_manual(values=c("green3","blue3","orange3","red3"))
# Plot results
LDA_of_Floristic_Composition<-ggplot(data=FloristicSurveyLDAval,aes(x=LD1,y=LD2,group=FloristicSurveysmall$GM_Coverage_category))+
stat_ellipse(geom="polygon",aes(colour=FloristicSurveysmall$GM_Coverage_category),fill=NA,size=1.2,alpha=0.3)+
stat_ellipse(geom="polygon",aes(fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=1.2,alpha=0.3)+
geom_point(aes(shape=FloristicSurveysmall$GM_Coverage_category,fill=FloristicSurveysmall$GM_Coverage_category,colour=FloristicSurveysmall$GM_Coverage_category),size=I(4),alpha=I(0.8))+
xlab("LD Axis 1")+ylab("LD Axis 2")+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_manual(values=c("green3"," blue3","orange3","red3"))+ scale_fill_manual(values=c("green3","blue3","orange3","red3"))
ggsave(file="LDA_of_Floristic_Composition.svg", plot=LDA_of_Floristic_Composition, width=10, height=8)
install.packages("ggsave")
install.packages('svglite')
ggsave(file="LDA_of_Floristic_Composition.svg", plot=LDA_of_Floristic_Composition, width=10, height=8)
## finally plotting.
mult <- 1 #multiplier for the arrows and text for envfit below. You can change this and then rerun the plot command.
ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, color=df_ell.FSurvey.GM_coverage$GM_coverage))+
geom_point( aes(color = FloristicSurvey.NMDS.data$GM_Coverage), size = 1)+
scale_color_manual(values = c(14,5,19,2))+
coord_cartesian(xlim = c(-1,1.5))+
theme_simple()+ guides(color=guide_legend("Garlic Mustard Coverage"))
# https://jonlefcheck.net/2012/10/24/nmds-tutorial-in-r/
# https://oliviarata.wordpress.com/2014/04/17/ordinations-in-ggplot2/
#Make a matrix with no row or column equal to 0 (do not enclude the env variable (GM COVERAGE))
FloristicSurvey$GM_Coverage_category<-cut(FloristicSurvey$GM_Coverage, c(-Inf,25,50,75,100), labels = c("None to Low","Medium", "High", "Overtaken"))
table(FloristicSurvey$GM_Coverage_category)
table(FloristicSurvey$GM_Coverage_category)
M <- as.matrix(FloristicSurvey[1:198,4:56])
M[is.na(M)] <- 0
rownames(M) <- FloristicSurvey$Population
M<-M[-c(130,133),]
M<-M[,-45]
GM_coverage_df <- data.frame(M[,52])
M<-M[,-52]
class(M) <- "numeric"
# with vegdist from Bray to seroeson: add binary = T
dist_FloristicSurvey <- vegdist(M, method = "bray", binary = T)
#The metaMDS analysis could have done the distance matrix internally but i would rather control it since i have presence/abscence
meta.nmds.FloristicSurvey2D <- metaMDS(dist_FloristicSurvey, k=2, trymax = 1000)
#The metaMDS analysis could have done the distance matrix internally but i would rather control it since i have presence/abscence
meta.nmds.FloristicSurvey2D <- metaMDS(dist_FloristicSurvey, k=2, trymax = 1000)
str(meta.nmds.FloristicSurvey2D)
stressplot(meta.nmds.FloristicSurvey2D)
FloristicSurvey_envfit <- envfit(meta.nmds.FloristicSurvey2D, env = GM_coverage_df, perm = 999) #standard envfit
FloristicSurvey_envfit
#data for plotting
##NMDS points
FloristicSurvey.NMDS.data<-GM_coverage_df
FloristicSurvey.NMDS.data$NMDS1<-meta.nmds.FloristicSurvey2D$points[ ,1]
FloristicSurvey.NMDS.data$NMDS2<-meta.nmds.FloristicSurvey2D$points[ ,2]
colnames(FloristicSurvey.NMDS.data)[1] <- "GM_Coverage"
# data for the envfit arrows
env.scores.FloristicSurvey <- as.data.frame(scores(FloristicSurvey_envfit, display = "vectors")) #extracts relevant scores from envifit
env.scores.FloristicSurvey <- cbind(env.scores.FloristicSurvey, env.variables = rownames(env.scores.FloristicSurvey)) #and then gives them their names
# function for ellipsess - just run this, is used later
#taken from the excellent stackoverflow Q+A: http://stackoverflow.com/questions/13794419/plotting-ordiellipse-function-from-vegan-package-onto-nmds-plot-created-in-ggplo
veganCovEllipse <- function (cov, center = c(0, 0), scale = 1, npoints = 100)
{
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))
}
#data for ellipse, use GM coverage
df_ell.FSurvey.GM_coverage <- data.frame() #sets up a data frame before running the function.
for(g in levels(FloristicSurvey.NMDS.data$GM_Coverage)){
df_ell.FSurvey.GM_coverage <- rbind(df_ell.FSurvey.GM_coverage, cbind(as.data.frame(with(FloristicSurvey.NMDS.data [FloristicSurvey.NMDS.data$GM_Coverage==g,],
veganCovEllipse(cov.wt(cbind(NMDS1,NMDS2),wt=rep(1/length(NMDS1),length(NMDS1)))$cov,center=c(mean(NMDS1),mean(NMDS2)))))
,GM_coverage=g))
}
# data for labelling the ellipse
NMDS.mean.FloristicSurvey=aggregate(FloristicSurvey.NMDS.data[ ,c("NMDS1", "NMDS2")],
list(group = FloristicSurvey.NMDS.data$GM_Coverage), mean)
## finally plotting.
mult <- 1 #multiplier for the arrows and text for envfit below. You can change this and then rerun the plot command.
ggplot(data = FloristicSurvey.NMDS.data, aes(y = NMDS2, x = NMDS1))+
geom_path(data = df_ell.FSurvey.GM_coverage, aes(x = NMDS1, y = NMDS2, group = df_ell.FSurvey.GM_coverage$GM_coverage, color=df_ell.FSurvey.GM_coverage$GM_coverage))+
geom_point( aes(color = FloristicSurvey.NMDS.data$GM_Coverage), size = 1)+
scale_color_manual(values = c(14,5,19,2))+
coord_cartesian(xlim = c(-1,1.5))+
theme_simple()+ guides(color=guide_legend("Garlic Mustard Coverage"))+
ggtitle("LDA of Floristic Composition \n in a Garlic Mustard Population")+
theme_bw()+
theme(legend.title=element_blank(),plot.title = element_text(hjust = 0.5,face="bold", size=20), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"),axis.title.x = element_text(size=18),axis.title.y = element_text(size=18),axis.text.y = element_text(size=10),panel.border = element_rect(colour = "black"),strip.background = element_rect(colour = "black",fill="white"),strip.text.x = element_text(size = 12))+scale_color_manual(values=c("green3"," blue3","orange3","red3"))+ scale_fill_manual(values=c("green3","blue3","orange3","red3"))
species<-names(FloristicSurvey[4:(length(FloristicSurvey))])
SpeciesGMCorrelation <- data.frame(matrix(ncol = 3, nrow = 0))
names(SpeciesGMCorrelation)<-c("Species", "PValue","signif")
for(i in 4:(length(FloristicSurvey))){
SpeciesGMCorrelation[i-3,1]<-names(FloristicSurvey[i])
SpeciesGMCorrelation[i-3,2]<-summary(glm(FloristicSurvey[,i]~GM_Coverage, data=FloristicSurvey, family = binomial))$coefficients[8]
}
for(i in 1:length(species)) if( SpeciesGMCorrelation[i,2] <= 0.05){
SpeciesGMCorrelation[i,3]<-c("TRUE")
}else{
SpeciesGMCorrelation[i,3]<-c("FALSE")
}
length(SpeciesGMCorrelation$signif[SpeciesGMCorrelation[,3]==TRUE])/length(SpeciesGMCorrelation$signif)*100
SpeciesGMCorrelation$Species[SpeciesGMCorrelation[,3]==TRUE]
# Redundancy analysis
sp.comp <- FloristicSurvey[,4:(length(FloristicSurvey))]
var <- FloristicSurvey[,1:3]
var$Quadrat <- as.character(var$Quadrat)
for(i in 1:length(var$Quadrat))if(var$Population[i] == "7"){
var$Quadrat[i]<-paste("7",var$Quadrat[i],sep="")
}else if(var$Population[i] == "3"){
var$Quadrat[i]<-paste("3",var$Quadrat[i],sep="")
}else if(var$Population[i] == "14"){
var$Quadrat[i]<-paste("14",var$Quadrat[i],sep="")
}else if(var$Population[i] == "13"){
var$Quadrat[i]<-paste("13",var$Quadrat[i],sep="")
}else if(var$Population[i] == "1"){
var$Quadrat[i]<-paste("1",var$Quadrat[i],sep="")
}
var$Population <- as.factor(var$Population)
formulaRDA <- rda(sp.comp ~ GM_Coverage + Condition(Population) , data=var)
sp.comp
GM_Coverage
var$GM_Coverage
str(var$GM_Coverage)
var$GM_Coverage<-as.numeric(var$GM_Coverage)
formulaRDA <- rda(sp.comp ~ GM_Coverage + Condition(Population) , data=var)
sp.comp
sp.comp<-matric(sp.comp)
sp.comp<-matrix(sp.comp)
formulaRDA <- rda(sp.comp ~ GM_Coverage + Condition(Population) , data=var)
sp.comp
var <- FloristicSurvey[,1:3]
# Redundancy analysis
sp.comp <- FloristicSurvey[,4:(length(FloristicSurvey))]
sp.comp<-as.matrix(sp.comp)
sp.comp
formulaRDA <- rda(sp.comp ~ GM_Coverage + Condition(Population) , data=var)
# Redundancy analysis
sp.comp <- FloristicSurvey[,4:(length(FloristicSurvey))]
Soil_characteristics$Location<-as.factor(Soil_characteristics$Location)
Soil_characteristics$Location<-as.factor(Soil_characteristics$Location)
