theme_simple()+labs(x="Mycorrhizal Colonization (%)", y="Lesions (%)")+
theme(axis.text.x = element_blank(),axis.text.y = element_blank())
df$y2<-df$y
df$y2[df$Location=="In"]<-df$y2[df$Location=="In"]+10
ggplot(df, aes(x,y2, colour=Location))+geom_smooth(method="lm", se=F)+
geom_point(size=4,alpha=0.3)+
theme_simple()+labs(x="Mycorrhizal Colonization (%)", y="Lesions (%)")+
theme(axis.text.x = element_blank(),axis.text.y = element_blank())
df$y2<-df$y
set.seed (238.4)
df$y2[df$Location=="In"]<-rnorm(nrow(df)/2,mean=10)
ggplot(df, aes(x,y2, colour=Location))+geom_smooth(method="lm", se=F)+
geom_point(size=4,alpha=0.3)+
theme_simple()+labs(x="Mycorrhizal Colonization (%)", y="Lesions (%)")+
theme(axis.text.x = element_blank(),axis.text.y = element_blank())
# calculating the r
indivCODE <- unique(fdata$indiv2)
dfcorr <-data.frame(indivCODE=c(0),r=c(0))
for (i in 1:length(indivCODE)){
dat1<-NULL
dat1<-filter(fdata, fdata$indiv2==indivCODE[i])
dfcorr[i,1] <- indivCODE[i]
dfcorr[i,2] <- cor(as.numeric(dat1$Mycorrhiza),as.numeric(dat1$Lesion))
}
dfcorr %>% drop_na()->dfcorr
#Normal?
car::qqp(dfcorr$r, "norm")
shapiro.test(dfcorr$r)
hist(dfcorr$r)
# Cannot be normal because it is only between -1 and 1 and our mean is at 0.
descdist(dfcorr$r, discrete = FALSE, boot = 500)
# weibull when transformed to be positive?
dfcorr$r.t <- dfcorr$r+1
fit.weibull <- fitdist(dfcorr$r.t, "weibull")
car::qqp(dfcorr$r.t, "weibull", shape = fit.weibull$estimate[[1]])
dfcorr$pop <- gsub("^([0-9]+)[I,O][A-Z]+.*","\\1",dfcorr$indivCODE)
dfcorr$location <- gsub("^[0-9]+([I,O])[A-Z]+.*","\\1",dfcorr$indivCODE)
dfcorr$species <- sub("^[0-9]+[I,O]([A-Z]+).*","\\1",dfcorr$indivCODE)
dfcorr$location <- as.factor(dfcorr$location)
dfcorr$species <- as.factor(dfcorr$species)
dfcorr$pop <- as.factor(dfcorr$pop)
meanR<-mean(dfcorr$r)
SEMR<-sd(dfcorr$r)/sqrt(length(dfcorr$r))
UCI<- meanR+SEMR*1.96
LCI<- meanR-SEMR*1.96
mean(filter(dfcorr, dfcorr$location=="I")$r)
mean(filter(dfcorr, dfcorr$location=="O")$r)
baysian_corrGLMM <- brm(r.t ~ location * species + (1|pop), data=dfcorr, family = weibull(link="log"), control = list(adapt_delta = 0.9))
library(tidyverse)
library(lme4)
library(MASS)
library(MuMIn)
library(emmeans)
library(boot)
library(brms)
library(loo)
library(fitdistrplus)
library(mefa)
library(ggbiplot)
# theme_simple() a homemade function from the Colautti lab (2017) to standardize figures
theme_simple <- function (base_size = 16, base_family = "") {
theme_classic(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.text = element_text(colour = "black"),
axis.title.x = element_text(size=18),
axis.text.x = element_text(size=16, face= "italic"),
axis.title.y = element_text(size=18, angle=90),
axis.text.y = element_text(size=16),
axis.ticks = element_blank(),
panel.background = element_rect(fill="white"),
panel.border = element_blank(),
plot.title=element_text(face="bold", size=24)
#      legend.position="none"
)
}
overdisp_fun <- function(model) {
## number of variance parameters in an n-by-n variance-covariance matrix
vpars <- function(m) {
nrow(m) * (nrow(m) + 1)/2
}
# The next two lines calculate the residual degrees of freedom
model.df <- sum(sapply(VarCorr(model), vpars)) + length(fixef(model))
rdf <- nrow(model.frame(model)) - model.df
# extracts the Pearson residuals
rp <- residuals(model, type = "pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
# Generates a p-value. If less than 0.05, the data are overdispersed.
pval <- pchisq(Pearson.chisq, df = rdf, lower.tail = FALSE)
c(chisq = Pearson.chisq, ratio = prat, rdf = rdf, p = pval)
}
mdata <- read.csv("Assessing_Oct_20.csv",stringsAsFactors=F)
indiv <- mdata$CODE[!mdata$CODE==""]
tdata <- mdata[grep("[0-9]+",mdata$Cross),]
nrow(tdata)/length(indiv)
# This is not the same because some individuals just had the totals not the cooccurence data
## THE COMMENT IS NOT CLEAR, EXPLAIN...
indiv2 <- tdata$CODE[!tdata$CODE==""]
nrow(tdata)/length(indiv2)
indiv2 <- data.frame(indiv2)
indiv2 <- mefa:::rep.data.frame(indiv2,each=100)
fdata <- cbind(indiv2,tdata)
fdata <- fdata[,-c(2,3,4,9,14,17,18)]
# Cleaning up the occurence data
## CLEANING UP HOW?
fdata[is.na(fdata)] <- 0
fdata$Lesion<-rowSums(fdata[,2:4])
fdata[fdata$Lesion>1,]
fdata$Mycorrhiza<-rowSums(fdata[,6:8])
fdata[fdata$Mycorrhiza>1,]
fdata <- fdata[,-c(2:4,6:8)]
#### Checking data for problems ####
summary(fdata)
fdata$None.Path <- as.integer(fdata$None.Path)
fdata$None.Myc <- as.integer(fdata$None.Myc)
fdata[is.na(fdata)] <- 0
sherb <- fdata$Herbivory+fdata$None.Herb
fdata[sherb!=1,]
fdata[sherb!=1,"None.Herb"]<-1
# Are all the sums equal to 100 for herb?
dframeHerb <- data.frame(counter=NA, Indiv2=NA,Sum=NA)
c <- 1
for (i in unique(fdata$indiv2)){
dframeHerb[c,] <- NA
subdata <- fdata[fdata$indiv2==i,]
dframeHerb$counter[c] <- c
dframeHerb$Indiv2[c] <- i
dframeHerb$Sum[c] <- sum(subdata[,"Herbivory"]+subdata[,"None.Herb"])
subdata <- NA
c <- c + 1
}
dframeHerb[dframeHerb$Sum!=100,]
# Are all the sums equal to 100 for Mycorrhiza?
dframeMyc <- data.frame(counter=NA, Indiv2=NA,Sum=NA)
c <- 1
for (i in unique(fdata$indiv2)){
dframeMyc[c,] <- NA
subdata <- fdata[fdata$indiv2==i,]
dframeMyc$counter[c] <- c
dframeMyc$Indiv2[c] <- i
dframeMyc$Sum[c] <- sum(subdata[,"Mycorrhiza"]+subdata[,"None.Myc"])
subdata <- NA
c <- c + 1
}
dframeMyc[dframeMyc$Sum!=100,]
# Are all the sums equal to 100 for Lesions?
dframeLesion <- data.frame(counter=NA, Indiv2=NA,Sum=NA)
c <- 1
for (i in unique(fdata$indiv2)){
dframeLesion[c,] <- NA
subdata <- fdata[fdata$indiv2==i,]
dframeLesion$counter[c] <- c
dframeLesion$Indiv2[c] <- i
dframeLesion$Sum[c] <- sum(subdata[,"Lesion"]+subdata[,"None.Path"])
subdata <- NA
c <- c + 1
}
dframeLesion[dframeLesion$Sum!=100,]
# Separating "Individual" into: pop,location,species columns
fdata$pop <- gsub("^([0-9]+)[I,O][A-Z]+.*","\\1",fdata$indiv)
fdata$location <- gsub("^[0-9]+([I,O])[A-Z]+.*","\\1",fdata$indiv)
fdata$species <- sub("^[0-9]+[I,O]([A-Z]+).*","\\1",fdata$indiv)
fdata$location <- as.factor(fdata$location)
fdata$species <- as.factor(fdata$species)
fdata$pop <- as.factor(fdata$pop)
fdata$indiv2 <- as.character(fdata$indiv2)
summary(fdata)
fdata %>% drop_na()->fdata
fdata$None.Myc <- as.factor(fdata$None.Myc)
fdata$Herbivory <- as.factor(fdata$Herbivory)
fdata$Mycorrhiza <- as.factor(fdata$Mycorrhiza)
fdata$Lesion <- as.factor(fdata$Lesion)
fdata$None.Herb <- as.factor(fdata$None.Herb)
fdata$None.Path <- as.factor(fdata$None.Path)
summary(fdata)
#### Gather ####
length(unique(fdata$indiv2))
Cross<- data.frame(c(rep(1:100, times=225)))
fdatac <- cbind(fdata,Cross)
colnames(fdatac)[11]<-"cross"
fdatac %>% gather(Trait, Value, c(4,6,7)) -> fdata_gather # The warning is an inconsequential bug from tidyverse (https://github.com/tidyverse/tidyr/issues/386)
fdata_gather$Value<-as.numeric(fdata_gather$Value)
fdata_gather$Trait<-as.factor(fdata_gather$Trait)
fdata_gather <- fdata_gather[,-c(2:4)]
mdata<-read.csv("Assessing_Oct_20.csv",stringsAsFactors=F)
indiv<-mdata$CODE[!mdata$CODE==""]
tdata<-mdata[mdata$Slide=="TOTAL",]
length(indiv)
nrow(tdata)
ndata<-cbind(indiv,tdata)
ndata<-ndata[,-c(2,3,4,9,14,17:37)]
ndata$None.Path<-as.integer(ndata$None.Path)
ndata$None.Myc<-as.integer(ndata$None.Myc)
# Checking data for problems
problemsPath<-ndata[!rowSums(ndata[,c(2:5)])==100,]
problemsHyph<-ndata[!rowSums(ndata[,c(6:9)])==100,]
problemsHerb<-ndata[!rowSums(ndata[,c(10:11)])==100,]
# Separating "Individual" into: pop,location,species columns
ndata$pop<-gsub("^([0-9]+)[I,O][A-Z]+.*","\\1",ndata$indiv)
ndata$location<-gsub("^[0-9]+([I,O])[A-Z]+.*","\\1",ndata$indiv)
ndata$species<-gsub("^[0-9]+[I,O]([A-Z]+).*","\\1",ndata$indiv)
ndata$location<-as.factor(ndata$location)
ndata$species<-as.factor(ndata$species)
ndata$pop<-as.factor(ndata$pop)
#### Totalling the scores####
binlesion<-cbind(ndata$None.Path,100-ndata$None.Path)
binmycorr<-cbind(ndata$None.Myc,100-ndata$None.Myc)
binherbivory<-cbind(ndata$None.Herb,100-ndata$None.Herb)
summary(ndata)
# scale data (only need to scale the numerical variables!)
numcols <- grep("^None.",names(ndata))
ndatas <- ndata
ndatas[,numcols] <- scale(ndatas[,numcols])
set.seed(3242)
y<-data.frame(rnorm(100,sd=7))
colnames(y)<-c("y")
y$y<-sort(y$y)
x<-data.frame(-y+rnorm(100))
colnames(x)<-c("x")
df <- cbind(x,y)
colnames(df)<-c("x","y")
df$Location <- c(rep("Out",nrow(df)/2),rep("In",nrow(df)/2))
ggplot(data=df, aes(x,y))+geom_smooth(method="lm", se=F)+geom_point(size=4,alpha=0.3)+
theme_simple()+labs(x="Mycorrhizal Colonization (%)", y="Lesions (%)")+
theme(axis.text.x = element_blank(),axis.text.y = element_blank())
ggplot(df, aes(x,y, colour=Location))+geom_smooth(method="lm", se=F)+
geom_point(size=4,alpha=0.3)+theme_simple()+
labs(x="Mycorrhizal Colonization (%)", y="Lesions (%)")+
theme(axis.text.x = element_blank(),axis.text.y = element_blank())
df$y2<-df$y
df$y2[df$Location=="In"]<-df$y2[df$Location=="In"]+10
ggplot(df, aes(x,y2, colour=Location))+geom_smooth(method="lm", se=F)+
geom_point(size=4,alpha=0.3)+
theme_simple()+labs(x="Mycorrhizal Colonization (%)", y="Lesions (%)")+
theme(axis.text.x = element_blank(),axis.text.y = element_blank())
df$y2<-df$y
set.seed (238.4)
df$y2[df$Location=="In"]<-rnorm(nrow(df)/2,mean=10)
ggplot(df, aes(x,y2, colour=Location))+geom_smooth(method="lm", se=F)+
geom_point(size=4,alpha=0.3)+
theme_simple()+labs(x="Mycorrhizal Colonization (%)", y="Lesions (%)")+
theme(axis.text.x = element_blank(),axis.text.y = element_blank())
summary(lm(Mycorrhiza~Lesion*species*loc+pop,data=fdat_ind))
library(tidyverse)
library(lme4)
library(MASS)
library(MuMIn)
library(emmeans)
library(boot)
library(brms)
library(loo)
library(fitdistrplus)
library(mefa)
library(ggbiplot)
# theme_simple() a homemade function from the Colautti lab (2017) to standardize figures
theme_simple <- function (base_size = 16, base_family = "") {
theme_classic(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.text = element_text(colour = "black"),
axis.title.x = element_text(size=18),
axis.text.x = element_text(size=16, face= "italic"),
axis.title.y = element_text(size=18, angle=90),
axis.text.y = element_text(size=16),
axis.ticks = element_blank(),
panel.background = element_rect(fill="white"),
panel.border = element_blank(),
plot.title=element_text(face="bold", size=24)
#      legend.position="none"
)
}
overdisp_fun <- function(model) {
## number of variance parameters in an n-by-n variance-covariance matrix
vpars <- function(m) {
nrow(m) * (nrow(m) + 1)/2
}
# The next two lines calculate the residual degrees of freedom
model.df <- sum(sapply(VarCorr(model), vpars)) + length(fixef(model))
rdf <- nrow(model.frame(model)) - model.df
# extracts the Pearson residuals
rp <- residuals(model, type = "pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
# Generates a p-value. If less than 0.05, the data are overdispersed.
pval <- pchisq(Pearson.chisq, df = rdf, lower.tail = FALSE)
c(chisq = Pearson.chisq, ratio = prat, rdf = rdf, p = pval)
}
mdata <- read.csv("Assessing_Oct_20.csv",stringsAsFactors=F)
indiv <- mdata$CODE[!mdata$CODE==""]
tdata <- mdata[grep("[0-9]+",mdata$Cross),]
nrow(tdata)/length(indiv)
# This is not the same because some individuals just had the totals not the cooccurence data
## THE COMMENT IS NOT CLEAR, EXPLAIN...
indiv2 <- tdata$CODE[!tdata$CODE==""]
nrow(tdata)/length(indiv2)
indiv2 <- data.frame(indiv2)
indiv2 <- mefa:::rep.data.frame(indiv2,each=100)
fdata <- cbind(indiv2,tdata)
fdata <- fdata[,-c(2,3,4,9,14,17,18)]
# Cleaning up the occurence data
## CLEANING UP HOW?
fdata[is.na(fdata)] <- 0
fdata$Lesion<-rowSums(fdata[,2:4])
fdata[fdata$Lesion>1,]
fdata$Mycorrhiza<-rowSums(fdata[,6:8])
fdata[fdata$Mycorrhiza>1,]
fdata <- fdata[,-c(2:4,6:8)]
#### Checking data for problems ####
summary(fdata)
fdata$None.Path <- as.integer(fdata$None.Path)
fdata$None.Myc <- as.integer(fdata$None.Myc)
fdata[is.na(fdata)] <- 0
sherb <- fdata$Herbivory+fdata$None.Herb
fdata[sherb!=1,]
fdata[sherb!=1,"None.Herb"]<-1
# Are all the sums equal to 100 for herb?
dframeHerb <- data.frame(counter=NA, Indiv2=NA,Sum=NA)
c <- 1
for (i in unique(fdata$indiv2)){
dframeHerb[c,] <- NA
subdata <- fdata[fdata$indiv2==i,]
dframeHerb$counter[c] <- c
dframeHerb$Indiv2[c] <- i
dframeHerb$Sum[c] <- sum(subdata[,"Herbivory"]+subdata[,"None.Herb"])
subdata <- NA
c <- c + 1
}
dframeHerb[dframeHerb$Sum!=100,]
# Are all the sums equal to 100 for Mycorrhiza?
dframeMyc <- data.frame(counter=NA, Indiv2=NA,Sum=NA)
c <- 1
for (i in unique(fdata$indiv2)){
dframeMyc[c,] <- NA
subdata <- fdata[fdata$indiv2==i,]
dframeMyc$counter[c] <- c
dframeMyc$Indiv2[c] <- i
dframeMyc$Sum[c] <- sum(subdata[,"Mycorrhiza"]+subdata[,"None.Myc"])
subdata <- NA
c <- c + 1
}
dframeMyc[dframeMyc$Sum!=100,]
# Are all the sums equal to 100 for Lesions?
dframeLesion <- data.frame(counter=NA, Indiv2=NA,Sum=NA)
c <- 1
for (i in unique(fdata$indiv2)){
dframeLesion[c,] <- NA
subdata <- fdata[fdata$indiv2==i,]
dframeLesion$counter[c] <- c
dframeLesion$Indiv2[c] <- i
dframeLesion$Sum[c] <- sum(subdata[,"Lesion"]+subdata[,"None.Path"])
subdata <- NA
c <- c + 1
}
dframeLesion[dframeLesion$Sum!=100,]
# Separating "Individual" into: pop,location,species columns
fdata$pop <- gsub("^([0-9]+)[I,O][A-Z]+.*","\\1",fdata$indiv)
fdata$location <- gsub("^[0-9]+([I,O])[A-Z]+.*","\\1",fdata$indiv)
fdata$species <- sub("^[0-9]+[I,O]([A-Z]+).*","\\1",fdata$indiv)
fdata$location <- as.factor(fdata$location)
fdata$species <- as.factor(fdata$species)
fdata$pop <- as.factor(fdata$pop)
fdata$indiv2 <- as.character(fdata$indiv2)
summary(fdata)
fdata %>% drop_na()->fdata
fdata$None.Myc <- as.factor(fdata$None.Myc)
fdata$Herbivory <- as.factor(fdata$Herbivory)
fdata$Mycorrhiza <- as.factor(fdata$Mycorrhiza)
fdata$Lesion <- as.factor(fdata$Lesion)
fdata$None.Herb <- as.factor(fdata$None.Herb)
fdata$None.Path <- as.factor(fdata$None.Path)
summary(fdata)
#### Gather ####
length(unique(fdata$indiv2))
Cross<- data.frame(c(rep(1:100, times=225)))
fdatac <- cbind(fdata,Cross)
colnames(fdatac)[11]<-"cross"
fdatac %>% gather(Trait, Value, c(4,6,7)) -> fdata_gather # The warning is an inconsequential bug from tidyverse (https://github.com/tidyverse/tidyr/issues/386)
fdata_gather$Value<-as.numeric(fdata_gather$Value)
fdata_gather$Trait<-as.factor(fdata_gather$Trait)
fdata_gather <- fdata_gather[,-c(2:4)]
mdata<-read.csv("Assessing_Oct_20.csv",stringsAsFactors=F)
indiv<-mdata$CODE[!mdata$CODE==""]
tdata<-mdata[mdata$Slide=="TOTAL",]
length(indiv)
nrow(tdata)
ndata<-cbind(indiv,tdata)
ndata<-ndata[,-c(2,3,4,9,14,17:37)]
ndata$None.Path<-as.integer(ndata$None.Path)
ndata$None.Myc<-as.integer(ndata$None.Myc)
# Checking data for problems
problemsPath<-ndata[!rowSums(ndata[,c(2:5)])==100,]
problemsHyph<-ndata[!rowSums(ndata[,c(6:9)])==100,]
problemsHerb<-ndata[!rowSums(ndata[,c(10:11)])==100,]
# Separating "Individual" into: pop,location,species columns
ndata$pop<-gsub("^([0-9]+)[I,O][A-Z]+.*","\\1",ndata$indiv)
ndata$location<-gsub("^[0-9]+([I,O])[A-Z]+.*","\\1",ndata$indiv)
ndata$species<-gsub("^[0-9]+[I,O]([A-Z]+).*","\\1",ndata$indiv)
ndata$location<-as.factor(ndata$location)
ndata$species<-as.factor(ndata$species)
ndata$pop<-as.factor(ndata$pop)
#### Totalling the scores####
binlesion<-cbind(ndata$None.Path,100-ndata$None.Path)
binmycorr<-cbind(ndata$None.Myc,100-ndata$None.Myc)
binherbivory<-cbind(ndata$None.Herb,100-ndata$None.Herb)
summary(ndata)
# scale data (only need to scale the numerical variables!)
numcols <- grep("^None.",names(ndata))
ndatas <- ndata
ndatas[,numcols] <- scale(ndatas[,numcols])
# Fix column characteristics
fdata$indiv2<-as.factor(fdata$indiv2)
fdata$Mycorrhiza<-as.numeric(paste(fdata$Mycorrhiza))
fdata$Lesion<-as.numeric(paste(fdata$Lesion))
fdata$Herbivory<-as.numeric(paste(fdata$Herbivory))
pct<-function(x){
sum(x)/100
}
fdat_ind<-aggregate(fdata[,c("Mycorrhiza","Lesion","Herbivory")],
by=list(indiv2=fdata$indiv2,pop=fdata$pop,loc=fdata$loc,species=fdata$species),
pct)
summary(lm(Mycorrhiza~Lesion*species*loc+pop,data=fdat_ind))
ggplot(fdat_ind,aes(Mycorrhiza,Lesion,colour=loc))+facet_wrap(~species)+geom_point()+theme_simple()+geom_smooth(method="lm")
anova(lm(Mycorrhiza~Lesion*species*loc+pop,data=fdat_ind))
anova(lm(Mycorrhiza~Lesion*species*loc*pop,data=fdat_ind))
base.Myc<-lm(Mycorrhiza~Lesion*species*loc*pop,data=fdat_ind)
summary(base.Myc)
anova(base.Myc)
summary(base.Myc)
base.Myc<-lm(Mycorrhiza~Lesion*species*loc*pop,data=fdat_ind)
summary(base.Myc)
anova(base.Myc)
ggplot(fdat_ind,aes(Mycorrhiza,Lesion,colour=loc))+facet_wrap(~species)+geom_point()+theme_simple()+geom_smooth(method="lm")
base.Myc<-lm(Lesion~Mycorrhiza*species*loc*pop,data=fdat_ind)
summary(base.Myc)
anova(base.Myc)
ggplot(fdat_ind,aes(Mycorrhiza,Lesion,colour=loc))+facet_wrap(~species)+geom_point()+theme_simple()+geom_smooth(method="lm")
base.Myc<-lm(Lesion~Mycorrhiza*species*loc*pop,data=fdat_ind)
anova(base.Myc)
ggplot(fdat_ind,aes(Mycorrhiza,Lesion,colour=loc))+facet_wrap(~species)+geom_point()+theme_simple()+geom_smooth(method="lm")
summary(base.Myc)
base.Myc<-lm(Lesion~Mycorrhiza*species*loc,data=fdat_ind)
base.Myc<-lm(Lesion~Mycorrhiza*species*loc,data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
## Mycorrhiza model
base.Myc<-lm(Mycorrhiza~Lesion*species*loc+pop*Lesion*loc,data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
## Mycorrhiza model
base.Myc<-lm(Mycorrhiza~Lesion*species*loc+pop*Lesion*loc,data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
str(fdat_ind)
## Mycorrhiza model (NOTE: No loc*species because not all species present in all populations)
base.Myc<-lm(Mycorrhiza~Lesion*species*loc+pop*Lesion*loc,data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
## Mycorrhiza model (NOTE: No loc*species because not all species present in all populations)
base.Myc<-lm(Mycorrhiza~species*loc+pop*Lesion*loc,data=fdat_ind)
summary(base.Myc)
## Mycorrhiza model (NOTE: No loc*species because not all species present in all populations)
base.Myc<-lm(Mycorrhiza~species*loc+pop*Lesion*loc,data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
## Mycorrhiza model (NOTE: No loc*species because not all species present in all populations)
base.Myc<-lm(Mycorrhiza~species*loc+pop*loc,data=fdat_ind)
summary(base.Myc)
## Mycorrhiza model (NOTE: No loc*species because not all species present in all populations)
base.Myc<-lm(Mycorrhiza~species*loc+pop*loc,data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
qplot(Mycorrhiza~species*loc)
qplot(Mycorrhiza~species:loc)
qplot(Mycorrhiza~species:loc,data=fdat_ind)
qplot(Mycorrhiza~loc,data=fdat_ind)
qplot(species, Mychorrhiza,data=fdat_ind)
qplot(species, Mycorrhiza,data=fdat_ind)
qplot(species:loc, Mycorrhiza,data=fdat_ind)
qplot(species:loc, Mycorrhiza,data=fdat_ind,colour=loc)
ggplot(fdat_ind,aes(species:loc,Mycorrhiza,colour=loc))+geom_boxplot()+theme_simple()
ggplot(fdat_ind,aes(species:loc,Mycorrhiza,colour=loc))+geom_boxplot()+theme_simple()
## Mycorrhiza model (NOTE: No loc*species because not all species present in all populations)
base.Myc<-lm(Mycorrhiza~species*loc+pop*loc,data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
ggplot(fdat_ind,aes(species,Mycorrhiza,colour=loc))+geom_boxplot()+theme_simple()
ggplot(fdat_ind,aes(species,Mycorrhiza,colour=loc))+geom_boxplot()+theme_simple()
ggplot(fdat_ind,aes(pop,Mycorrhiza,colour=loc))+geom_boxplot()+theme_simple()
summary(base.Myc)
base.Myc$coefficients
## Mycorrhiza model (NOTE: No loc*species because not all species present in all populations)
base.Myc<-lm(Mycorrhiza~species+pop+loc+species:loc+pop:loc,data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
summary(base.Myc)
summary(lm(Mycorrhiza~loc,data=fdat_ind))
## Mycorrhiza model (NOTE: No loc*species because not all species present in all populations)
base.Myc<-lmer(Mycorrhiza~species+loc+species:loc+(1|pop)+(1|pop:loc),data=fdat_ind)
anova(base.Myc)
summary(base.Myc)
aov(base.Myc)
base.Myc
anova(base.Myc)
?anova
?lmer
noint.Myc<-lmer(Mycorrhiza~species+loc+species:loc+(1|pop),data=fdat_ind)
anova(base.Myc,noint.Myc)
noint.Myc<-lmer(Mycorrhiza~species+loc+(1|pop)+(1|pop:loc),data=fdat_ind)
anova(base.Myc,noint.Myc)
anova(base.Myc)
ggplot(fdat_ind,aes(species,Mycorrhiza,colour=loc))+geom_boxplot()+theme_simple()
ggplot(fdat_ind,aes(pop,Mycorrhiza,colour=loc))+geom_boxplot()+theme_simple()
base.Myc ## Inspect coefficients
